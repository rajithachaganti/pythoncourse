Flask Micro services architecture:
-----------------------------------
Flask - micro services architecture

Django - apps - set of urls,views,models.py files

API CALL : 
------------
Request url :
Request method:
payload : 

3 to 4 tasks 

service1 : loading data
service2 : parsing data
service3 : saving the data
service4 : monitoring the data 


Orchestrator :
----------------
App.py    urls.py 
 
 
> python App.py 

1. GUI Call for micro services:
====================================
API:   Request URL    : /gui_services/123
	   Request method : POST

controller                 service +   dao                  DB
----------------------------------------------------------------------
Auth.py                 Commons.py
 class Microservices      connectFetchJSON():
		on_get():
		
		on_post():
		
	
UI --> Orchestrator  --> DB 	
   <--		         <--
		
		
2. GUI Call for Logic services:
---------------------------------
API:
=====
Request URL    : /gui_services/api/{param}
Request method : POST

controller                 service +   dao                  DB
----------------------------------------------------------------------
Auth.py                 Commons.py
 class Logicservices      connectFetchJSON():
		on_get():
		
		on_post():
		
GET:
-----	
/gui_services/api/{param}
param : getservice          : "select filtername as fname from alarmfilter where username='Siva'"
	  : alarms_filter_view	: "select filtername as fname from alarmfilter where username='"+uname[0]+"'"
  	  : galarm_column
	  : get_tickets
	  : get_alarms
      : delete_alarms_filter	 
POST:
-----
/gui_services/api/{param}
param : alarms_filter       :  "insert into alarmfilter (username,jsonvalue,modifiedtime,filtername) values(%s,%s,%s,%s);"
	  : su_alarm_column     : 
	  : testing3            :
	  : rpa                 : 
	  : predictive
	  : orches 
	  : tblconfig 
	  : ctblconfig
	  : utblconfig
	  : 
		
		
		
		
		
		
		
		